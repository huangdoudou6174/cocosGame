
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/myGame/Script/Utils/PlygonSplitProgram.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '1b553rELBhOrKZzzxODssPA', 'PlygonSplitProgram');
// myGame/Script/Utils/PlygonSplitProgram.ts

Object.defineProperty(exports, "__esModule", { value: true });
var List_1 = require("./List");
var PlygonSplitProgram = /** @class */ (function () {
    function PlygonSplitProgram() {
    }
    /**
     * �ָ�����
     * @param points ����ζ�����������飬����ʱ������
     * @returns �ָ��������εĶ�����points�����е�������ÿ���������Ķ����ʾһ�������Σ�����ʱ������
     */
    PlygonSplitProgram.process = function (points) {
        if (points.length < 3)
            return [];
        this.pList = new List_1.default();
        for (var i = 0, c = points.length; i < c; ++i) {
            this.pList.push(new PointStatus(i, points[i]));
        }
        var node = this.pList.first;
        var concaveCount = 0;
        while (!!node) {
            this.updatePointStatus(node);
            if (!node.value.isConvex) {
                concaveCount++;
            }
            node = node.next;
        }
        if (concaveCount == 0) {
            var tri_1 = this.processConvexPlygon(points);
            this.reset();
            return tri_1;
        }
        if (concaveCount == 1) {
            var index = 0;
            var node_1 = this.pList.first;
            while (node_1.value.isConvex) {
                index++;
                node_1 = node_1.next;
            }
            var tri_2 = this.processSingleConcavePlygon(points, index);
            this.reset();
            return tri_2;
        }
        var tri = [];
        node = this.pList.first;
        while (this.pList.length >= 3) {
            while (!!node && !node.value.isSeparable) {
                node = node.next;
            }
            if (!node) {
                node = this.pList.first;
                while (!!node && !node.value.isSeparable) {
                    node = node.next;
                }
                if (!node) {
                    console.warn("����ηָ���δδ��ɣ����Ҳ����ɷָ��:", this.pList);
                    break;
                }
            }
            var prev = node.prev ? node.prev : this.pList.last;
            var next = node.next ? node.next : this.pList.first;
            tri.push(prev.value.pIndex, node.value.pIndex, next.value.pIndex);
            this.pList.removeNode(node);
            this.updatePointStatus(prev);
            this.updatePointStatus(next);
            node = next;
        }
        this.reset();
        return tri;
    };
    PlygonSplitProgram.updatePointStatus = function (node) {
        var prev = node.prev ? node.prev : this.pList.last;
        var next = node.next ? node.next : this.pList.first;
        if (!node.value.isConvex) {
            if (this.isConvex(node.value.point, node.prev.value.point, node.next.value.point)) {
                node.value.isConvex = true;
            }
            else {
                node.value.isSeparable = false;
                return;
            }
        }
        var tri = [prev.value.point, node.value.point, next.value.point];
        var p = this.pList.first;
        while (!!p) {
            if (!p.value.isConvex && p != node && p != prev && p != next) {
                if (this.inTriangle(p.value.point, tri)) {
                    node.value.isSeparable = false;
                    return;
                }
            }
            p = p.next;
        }
        node.value.isSeparable = true;
    };
    PlygonSplitProgram.processConvexPlygon = function (points) {
        var tri = [];
        for (var i = 1, c = points.length - 1; i < c; ++i) {
            tri.push(0, i, i + 1);
        }
        return tri;
    };
    PlygonSplitProgram.processSingleConcavePlygon = function (points, concavePointIndex) {
        if (concavePointIndex == 0) {
            return this.processConvexPlygon(points);
        }
        var tri = [];
        var index = concavePointIndex;
        var lastIndex = points.length - 1;
        for (var i = concavePointIndex + 1; i < lastIndex; ++i) {
            tri.push(index, i, i + 1);
        }
        if (index !== lastIndex) {
            tri.push(index, lastIndex, 0);
        }
        var preIndex = index - 1;
        for (var i = 0; i < preIndex; ++i) {
            tri.push(index, i, i + 1);
        }
        return tri;
    };
    PlygonSplitProgram.isConvex = function (p, p1, p2) {
        return this.cross(this.sub(p, p1), this.sub(p2, p)) >= 0;
    };
    PlygonSplitProgram.inTriangle = function (p, tri) {
        var ab = this.sub(tri[1], tri[0]);
        var ac = this.sub(tri[2], tri[0]);
        var bc = this.sub(tri[2], tri[1]);
        var ad = this.sub(p, tri[0]);
        var bd = this.sub(p, tri[1]);
        // let ac = tri[2].sub(tri[0]);
        // let bc = tri[2].sub(tri[1]);
        // let ad = p.sub(tri[0]);
        // let bd = p.sub(tri[1]);
        var b = this.cross(ab, ac) >= 0;
        return (b !== (this.cross(ab, ad) < 0)) &&
            (b !== this.cross(ac, ad) >= 0) &&
            (this.cross(bc, ab) > 0) !== (this.cross(bc, bd) >= 0);
    };
    PlygonSplitProgram.reset = function () {
        if (!!this.pList) {
            this.pList.reset();
            this.pList = null;
        }
    };
    PlygonSplitProgram.cross = function (p1, p2) {
        return p1.x * p2.y - p1.y * p2.x;
    };
    PlygonSplitProgram.sub = function (p1, p2) {
        return {
            x: p1.x - p2.x,
            y: p1.y - p2.y
        };
    };
    PlygonSplitProgram.pList = null;
    return PlygonSplitProgram;
}());
exports.default = PlygonSplitProgram;
var PointStatus = /** @class */ (function () {
    function PointStatus(index, v) {
        this.point = null;
        this.isConvex = false;
        this.isSeparable = false;
        this.pIndex = index;
        this.point = v;
    }
    return PointStatus;
}());

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,